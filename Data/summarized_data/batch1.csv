,doc,purpose,description,scope,requirements,assumptions and dependencies,architecture,users
0,SRS1,"This section will cover general information about the project perspective,  functions, and various requirements and constraints. More detailed descriptions of the project requirements and functions will be covered in latter sections. 2.1 Product Perspective  This project is designed to be used by employees of several automotive plants to Prototype V1 will have little functionality, and its main purpose will be to display  the user interface as well as to show our interpretation of the requirements. 5.2 Sample Scenarios  An employee, Bob, was given the unique four-digit-code 7924 by their The system is a desktop application that requires a computer running Windows  Vista SP2 or higher version of Windows operating system. The computer must have Visual C++ Redistributable 2010, as well as .NET Framework 4.0 installed.  Prototype V1 will have little functionality, and its main purpose will be to display Vista SP2 or higher version of Windows operating system. The computer must have Visual C++ Redistributable 2010, as well as .NET Framework 4.0 installed.  Prototype V1 will have little functionality, and its main purpose will be to display  the user interface as well as to show our interpretation of the requirements. 5.2 Sample Scenarios Specification document will further explain the specifics of the software system being produced. Section 2 focuses on the context for needing the proposed system, how it should function, and the related constraints. Section 3 provides a detailed listing of the requirements specific to the system following a hierarchical numbering scheme. Section 4 addresses the modeling requirements which includes use cases diagrams, a state diagram, and a high-level class diagram. Section 5 discusses the proposed prototype and the details of the system with instructions on how to run it as well as sample scenarios. Section 6 contains a list of references used throughout the document. Finally, Section 7 provides contact information used for further inquiries. 2 Overall Description  This section will cover general information about the project perspective,  functions, and various requirements and constraints. More detailed descriptions of the project requirements and functions will be covered in latter sections. 2.1 Product Perspective ","a. This describes the attributes, operations, relationships, and UML extensions for each of the classes in the class diagram.  Element Name  Description Description Element Name  Description Description  Defects Provides interface for viewing a given vehicle and the defects associated with it. Supports 3D model of the vehicle with color-coordinated defect visualization. Use Case: Remove Defect Record  Actors: Analyst  Description: Analyst can remove a defect record if there is an error. Description Description  Defects Provides interface for viewing a given vehicle and the defects associated with it. Supports 3D model of the vehicle with color-coordinated defect visualization.  Attributes Template based on IEEE Std 830-1998 for SRS. Modifications (content and ordering of information) have been made by James Daly, Michigan State University (dalyjame at cse.msu.edu) components:System.Com ponentModel.IContainer Required designer variable Description: Analyst can remove a defect record if there is an error.  - Analyst selects type of report to generate  Use Case: Generate Report ","The system will have two separate sets of hardware constraints, one for the end  user program, and one for the server architecture. The end user system will need to run on a Windows computer, while the backend will need to run on appropriate server hardware. Both setups require an internet connection, and the server architecture requires enough memory to store the database of past defects. The exact amount of storage required will depend on how long the customer wishes to store past information for. 2.5 Assumptions and Dependencies  It is assumed that the end user program will be run on a Windows Vista or newer user program, and one for the server architecture. The end user system will need to run on a Windows computer, while the backend will need to run on appropriate server hardware. Both setups require an internet connection, and the server architecture requires enough memory to store the database of past defects. The exact amount of storage required will depend on how long the customer wishes to store past information for. 2.5 Assumptions and Dependencies  It is assumed that the end user program will be run on a Windows Vista or newer  Windows system. It is also assumed that the technician using the end user program will have been trained to recognize all the types of paint defects, as it is not the software’s purpose to explain how to qualify defects, instead it only stores data on the defects. 2.6 Proportioning of Requirements technicians that are running paint inspections in the car factories. These technicians will be trained to identify types of paint defects, and to run a complete inspection of the entire paint job on a car. After identifying a paint defect of a particular type, these technicians will then enter the defect into the software to store its information in the database. The second type of user will be an administrative user that will utilize the reports the system produces. 2.4 Constraints  The system will have two separate sets of hardware constraints, one for the end  user program, and one for the server architecture. The end user system will need to run on a Windows computer, while the backend will need to run on appropriate server hardware. Both setups require an internet connection, and the server architecture requires enough memory to store the database of past defects. The exact amount of storage required will depend on how long the customer wishes to store past information for. 2.5 Assumptions and Dependencies 2.3. Analyst marks area of defect on the vehicle wireframes shown  2.3.1. Analyst will drag an ellipsoid over the area of defect and shape the ellipsoid to accurately represent the defect  2.3.2. Color of mark will depend on the type of defect selected in step 2.2 2.3.1. Analyst will drag an ellipsoid over the area of defect and shape the ellipsoid to accurately represent the defect  2.3.2. Color of mark will depend on the type of defect selected in step 2.2  2.4. Analyst enters any notes about defect ","Authors: Lisa Doan, Alex Besinger, Patrick McCormick, Samantha Oldenburg, Clayton Peters  Customer: General Motors  Instructor: James Daly 1 Introduction 1. Analyst loads application and enters identification information 1.1. Analyst enters their first and last name  1.2. Analyst enters the start and end time of their working period, along with which shift they are working  1.3. Analyst selects which checkpoint vehicles are inspected Dividing these features into two executables would simplify work for both types of employees, while hiding unnecessary function. 3 Specific Requirements  1. Analyst loads application and enters identification information 1.1. Analyst enters their first and last name  1.2. Analyst enters the start and end time of their working period, along with which shift they are working Actors: Analyst  Description: Analyst enters identifying information, selects their work period, and selects the checkpoint where vehicles are to be inspected.  - Analyst inspects a vehicle (repeat until end of shift as vehicles are inspected) 1.2. Analyst enters the start and end time of their working period, along with which shift they are working  1.3. Analyst selects which checkpoint vehicles are inspected  1.4. Analyst saves information entered and information is stored in a database ","This section will cover general information about the project perspective,  functions, and various requirements and constraints. More detailed descriptions of the project requirements and functions will be covered in latter sections. 2.1 Product Perspective  This project is designed to be used by employees of several automotive plants to Specification document will further explain the specifics of the software system being produced. Section 2 focuses on the context for needing the proposed system, how it should function, and the related constraints. Section 3 provides a detailed listing of the requirements specific to the system following a hierarchical numbering scheme. Section 4 addresses the modeling requirements which includes use cases diagrams, a state diagram, and a high-level class diagram. Section 5 discusses the proposed prototype and the details of the system with instructions on how to run it as well as sample scenarios. Section 6 contains a list of references used throughout the document. Finally, Section 7 provides contact information used for further inquiries. 2 Overall Description  This section will cover general information about the project perspective,  functions, and various requirements and constraints. More detailed descriptions of the project requirements and functions will be covered in latter sections. 2.1 Product Perspective This Software Requirements Specification document outlines Group 8’s solution  to the client’s need to automate the recording of paint defects on vehicles during production. The topics covered in this document include: an introduction to the client’s problem, the team’s proposed solution to address the problem such as how the product system should function, specific system and client requirements, and diagrams illustrating use cases and scenarios when the system would be used. Additionally, a prototype of the proposed system with instructions on how to run it and sample scenarios is also provided in the latter portion of the document. At the end of the document, external sources that were referenced appear in a list. 1.1 Purpose  The Software Requirements Specification (SRS) document serves to outline the document, the list below clearly specifies the meanings of these terms.  - SRS (Software Requirements Specification) ​ : A document of the software system to be developed that discusses the functional and nonfunctional requirements. It also includes use cases that describe how users (client analysts) would interact with the software.  - Defect ​ : An impurity, scratch, or other imperfection in the paint on a car. Analysts are trained to recognize all the different types of defects. Instructor: James Daly 1 Introduction  This Software Requirements Specification document outlines Group 8’s solution  to the client’s need to automate the recording of paint defects on vehicles during production. The topics covered in this document include: an introduction to the client’s problem, the team’s proposed solution to address the problem such as how the product system should function, specific system and client requirements, and diagrams illustrating use cases and scenarios when the system would be used. Additionally, a prototype of the proposed system with instructions on how to run it and sample scenarios is also provided in the latter portion of the document. At the end of the document, external sources that were referenced appear in a list. 1.1 Purpose ","To clarify the unique terminology, acronyms, and abbreviations used in the  document, the list below clearly specifies the meanings of these terms.  - SRS (Software Requirements Specification) ​ : A document of the software system to be developed that discusses the functional and nonfunctional requirements. It also includes use cases that describe how users (client analysts) would interact with the software. document, the list below clearly specifies the meanings of these terms.  - SRS (Software Requirements Specification) ​ : A document of the software system to be developed that discusses the functional and nonfunctional requirements. It also includes use cases that describe how users (client analysts) would interact with the software.  - Defect ​ : An impurity, scratch, or other imperfection in the paint on a car. Analysts are trained to recognize all the different types of defects. This Software Requirements Specification document outlines Group 8’s solution  to the client’s need to automate the recording of paint defects on vehicles during production. The topics covered in this document include: an introduction to the client’s problem, the team’s proposed solution to address the problem such as how the product system should function, specific system and client requirements, and diagrams illustrating use cases and scenarios when the system would be used. Additionally, a prototype of the proposed system with instructions on how to run it and sample scenarios is also provided in the latter portion of the document. At the end of the document, external sources that were referenced appear in a list. 1.1 Purpose  The Software Requirements Specification (SRS) document serves to outline the technicians that are running paint inspections in the car factories. These technicians will be trained to identify types of paint defects, and to run a complete inspection of the entire paint job on a car. After identifying a paint defect of a particular type, these technicians will then enter the defect into the software to store its information in the database. The second type of user will be an administrative user that will utilize the reports the system produces. 2.4 Constraints  The system will have two separate sets of hardware constraints, one for the end  user program, and one for the server architecture. The end user system will need to run on a Windows computer, while the backend will need to run on appropriate server hardware. Both setups require an internet connection, and the server architecture requires enough memory to store the database of past defects. The exact amount of storage required will depend on how long the customer wishes to store past information for. 2.5 Assumptions and Dependencies The system will have two separate sets of hardware constraints, one for the end  user program, and one for the server architecture. The end user system will need to run on a Windows computer, while the backend will need to run on appropriate server hardware. Both setups require an internet connection, and the server architecture requires enough memory to store the database of past defects. The exact amount of storage required will depend on how long the customer wishes to store past information for. 2.5 Assumptions and Dependencies  It is assumed that the end user program will be run on a Windows Vista or newer ","A user directory system is a feature that could be included in a future release. A  user directory could store what factory a user works in, what shifts they work, and further information for users. Currently, any user can access any factory, and input defects for any shift, checkpoint, and model. A user directory system could be used to verify that a user is entering data for an appropriate shift, and reduce the possibility of mistakes when entering data.  Another possible feature that could be added in the future is the release of another Windows system. It is also assumed that the technician using the end user program will have been trained to recognize all the types of paint defects, as it is not the software’s purpose to explain how to qualify defects, instead it only stores data on the defects. 2.6 Proportioning of Requirements  A user directory system is a feature that could be included in a future release. A  user directory could store what factory a user works in, what shifts they work, and further information for users. Currently, any user can access any factory, and input defects for any shift, checkpoint, and model. A user directory system could be used to verify that a user is entering data for an appropriate shift, and reduce the possibility of mistakes when entering data. The end user system will initially need to present a user interface where they can  select the factory they are working at, the checkpoint they are inspecting at, and the type of car being inspected. This information is stored on the server alongside the defect data that the user inputs later.  Second, another menu will allow users to indicate the location, severity, and type Fig 1. ​ Pictorial representation of the bigger system 2.2 Product Functions  The end user system will initially need to present a user interface where they can  select the factory they are working at, the checkpoint they are inspecting at, and the type of car being inspected. This information is stored on the server alongside the defect data that the user inputs later. record and track defects in the paint of cars on an assembly line. There are several constraints the system will need to operate under. First, the end user system will need to run on a Windows computer, while the backend will need to run on appropriate server hardware. The end user system will need to present a user interface that allows a user to indicate the location, severity, and type of defects. In addition, users will be able to query server data by running reports. The frontend and backend will communicate using HTTP requests to both send and receive data from the database. Template based on IEEE Std 830-1998 for SRS. Modifications (content and ordering of information) have been made by James Daly, Michigan State University (dalyjame at cse.msu.edu)  Fig 1. ​ Pictorial representation of the bigger system 2.2 Product Functions  The end user system will initially need to present a user interface where they can "
1,SRS10,"Software Requirements Specification for DineOut Page 1 1. Introduction 1.1 Purpose DineOut is an android application that aims to digitalize the process of various restaurant management operations including ordering and inventory management and POS. This document aims to capture the system requirements and features particularly related to ordering and inventory management to be implemented in DineOut version 1.0., with the later releases on POS (Point of Sale). 1.2 Document Conventions  1.2.1 Priority Conventions In this complete document, we will mention priority as “low” or “high” throughout the document. Secondly, priorities are only mentioned in section 4 and section 5 along with detailed description of the requirements. Any high-level requirements mentioned elsewhere are assumed to inherit priorities of their detailed counterparts in section 4,5.  1.2.2 Fonts Conventions Throughout this document, All the user entities are written in capitalizations i.e. first letter as capital. Also, any significant term which has been described in the glossary is made bold and italic in the text. On the other hand, those terms which are significant (but not described in glossary) are bold in text. 1.3 Intended Audience and Reading Suggestions The purpose of this document is to give a detailed description of the requirements for the “DineOut” software. It will illustrate the purpose, scope and complete description for the development of system. It will also explain external interface requirements and system requirements as well as non-functional requirements. This document is primarily intended to be proposed to a customer for its approval and also for further processing such as additions to be developed in later releases. Customers can refer to section 3 and 4 for the list of requirements implemented in Version 1.0. Users are advised to refer to user documentation section for tutorials and online support information. This document will also be used as a reference for developing and testing Version 1.0 by the development team as well as the testers. The development team can refer to section 2.3 and 2.6 for system level information and section 3 for system features that are to be implemented in this version of the software. Software Requirements Specification for DineOut Page 2 1.4 Product Scope DineOut is a restaurant management system developed with the intention of automating the day to day tasks in a restaurant like order and inventory management, bill generation and taking feedback. This release of the software would deal with these tasks only whereas more areas might be automated in the future versions of this software. The main purpose is to improve the performance of the restaurant by eradicating the daily paperwork. With this system the tasks would be performed in less amount of time and more efficiently. An additional benefit of this software is that during the rush hours the load can be balanced effectively, and restaurants would perform better than usual. In addition to this, human error that occurs when performing tasks manually is also minimized and presence of queues in the system to assign tasks to chefs can reduce congestion in the kitchen. The system would also result in reduction of labor which would result in the reduction of expenses of the restaurant. Feedback module would help the restaurant check for how well they are performing, and monthly/yearly figures can be checked by the billing module to see the trends in sales and profits. These benefits can potentially result in generation of more revenues for the restaurant. 1.5 References 1. Android User Interface Guidelines, Available at: https://developer.android.com/guide/practices/ui_guidelines/ 2. IEEE. IEEE Std 830-1998 IEEE Recommended Practice for Software Requirements Specifications. IEEE Computer Society, 1998. Software Requirements Specification for DineOut Page 3 2. Overall Description This section will give an overview of the DineOut application. The basic functionality of the system as well its context will be explored in detail. It also describes different kinds of stakeholders and user classes associated with the system and what functionality is available for each class. At last, the assumptions and dependencies for the system are presented. 2.1 Product Perspective DineOut app will attempt to replace the traditional manual ordering process and is a new self- contained software system that consists of two parts: one mobile application and the other is Firebase database. The mobile application will be used for ordering and interacting with the inventory while the Firebase database will be used for storing the inventory and ordering related information about the food items like pending and complete order queues. The mobile application will have five interfaces. Each for Customer, Manager, Head Chef, Admin and Chef. Manager can see/edit the status of available/reserved tables. Customer’s interface will consist of a scrollable menu listing available items and their price. When the customer selects some dishes and place the order, it will be stored in “pending orders” table in Firebase database. Head Chef’s interface will be such that he is notified of the pending order and he is able to assign it to one the available queues of chefs who are then able to see the new order in their screens or on a central display in kitchen. After each item/dish in an order is prepared, the order is marked completed through the Head Chef’s interface, the hall manager gets notified through his interface. Customer’s interface has an option for requesting the bill. Bill is printed through the Manager’s interface. Admin can change and modify the Firebase database like add new menus or staff, edit current inventory stock etc. Fig1 - System Perspective Diagram Software Requirements Specification for DineOut Page 4 2.2 Product Functions Given below are the major functions that can be performed using DineOut app. Moreover, a Data Flow Diagram (DFD) for better understanding of the system is also given in Appendix B. The system will: • Allow Customers to scroll through the menu and select the dishes he/she wants. • Allow the Customers to cancel/edit the order any time before its prepared. • Allow Customers to provide feedback regarding the food and overall service of the restaurant. • Allow Customers to request for bill. • Allow Customers to ask for help through the system. • Assign Head Chef to assign the dishes in an order to chefs according to their specialties. • Show dish queues and their status, for Chefs. • Allow admin to perform CRUD (create, retrieve, update and delete) operations on Staff Members, Menu Items and Inventory. • Allow Head Chef to mark orders complete. • Allow the Head Chef to approve cancellation of dish or order. • Allow Hall Manager to mark the bill as paid. • Notify the Hall Manager when a particular order is complete. • Allow the Hall Manager to see/edit status of tables reserved and available and their capacities. 2.3 User Classes and Characteristics There are four types of users that interact with our system (See appendix B). Firstly, there is a Hall Manager, then Customer, Head Chef and Admin. We’ll provide an interface for Chefs as well through which they are looking at the status of their order queues, but they will not interact with our system. System shall use v4 support library Print Helper for connecting to the printer and  a driver to connect to the kitchen screen. 3.4 Communications Interfaces DineOut is an android application and it will communicate with Firebase (which is a storage server provided by Google for android developers). Firebase uses HTTP protocol for communication, so our device will follow HTTP protocol when connecting to Firebase. Software Requirements Specification for DineOut Page 9 4. System Requirements 4.1 Place Order  4.1.1 Description and Priority 2.3.5 Hall Manager Hall Managers will provide its input when he marks the bill as paid when customers pay for their order or get the bill printed. Moreover, he gets a notification whenever a particular order is complete, or some customer asks for help through the system. Hall manager can also see tables in the hall and their status i.e. empty or filled. 2.4 Operating Environment It is an android application running on a tablet and the tablets are present in a restaurant. Firstly, manager would be present at the entrance and system in his tab would show the tables that are empty/reserved. There would be a tab present at every table for customers which they will use to give order. When an order is placed the server would notify the head chef/ kitchen manager who would be in the kitchen. Head chef would use his tab which also would have the system installed and would add the order to the appropriate queues of the chefs. The chefs would be present in the kitchen area and their interface would allow them to check for the dishes they have to prepare. So, the system is running on various tablets but the operating environment and purpose of each is different for each user. 2.5 Design and Implementation Constraints  2.5.1 Operating System Constraint  System should be compatible and will smoothly run on Android version 6.0 or above. 2.3.4 Admin Admin’s job is to manage the inventory and other information related to menu and chefs in the system.  2.3.5 Hall Manager Hall Managers will provide its input when he marks the bill as paid when customers pay for their order or get the bill printed. Moreover, he gets a notification whenever a particular order is complete, or some customer asks for help through the system. Hall manager can also see tables in the hall and their status i.e. empty or filled. 2.4 Operating Environment It is an android application running on a tablet and the tablets are present in a restaurant. Firstly, manager would be present at the entrance and system in his tab would show the tables that are empty/reserved. There would be a tab present at every table for customers which they will use to give order. When an order is placed the server would notify the head chef/ kitchen manager who would be in the kitchen. Head chef would use his tab which also would have the system installed and would add the order to the appropriate queues of the chefs. The chefs would be present in the kitchen area and their interface would allow them to check for the dishes they have to prepare. So, the system is running on various tablets but the operating environment and purpose of each is different for each user. 2.5 Design and Implementation Constraints  2.5.1 Operating System Constraint 2.3.3 Chef Software Requirements Specification for DineOut Page 5 Chefs don’t interact with the system. They just have to look at the dishes present in their queues and prepare the dishes accordingly. Chef’s name, address and specialty etc. are stored in the database.  2.3.4 Admin Admin’s job is to manage the inventory and other information related to menu and chefs in the system.  2.3.5 Hall Manager Hall Managers will provide its input when he marks the bill as paid when customers pay for their order or get the bill printed. Moreover, he gets a notification whenever a particular order is complete, or some customer asks for help through the system. Hall manager can also see tables in the hall and their status i.e. empty or filled. 2.4 Operating Environment It is an android application running on a tablet and the tablets are present in a restaurant. Firstly, manager would be present at the entrance and system in his tab would show the tables that are empty/reserved. There would be a tab present at every table for customers which they will use to give order. When an order is placed the server would notify the head chef/ kitchen manager who would be in the kitchen. Head chef would use his tab which also would have the system installed and would add the order to the appropriate queues of the chefs. The chefs would be present in the kitchen area and their interface would allow them to check for the dishes they have to prepare. So, the system is running on various tablets but the operating environment and purpose of each is different for each user. 2.5 Design and Implementation Constraints ","4.8.3 Functional Requirements  REQ-1: System must show the feedback screen to the user. REQ-2: System must display multiple choice questions for feedback. 4.9 Add/Edit/Delete Staff Members  4.9.1 Description and Priority 4.9.3 Functional Requirements  REQ-1: Admin should be able to add all necessary information about the staff member REQ-2: System must give admin the ability to edit information about all staff members REQ-3: System must give admin the ability to remove staff members. 4.10 Add/Edit/Delete Menu Items  4.10.1 Description and Priority 4.9.1 Description and Priority  The system gives ability to the admin to add, edit and delete staff members. Using this feature an admin can add chefs, waiters, managers. priority: high  4.9.2 Stimulus/Response sequences 4.10.1 Description and Priority  The system gives ability to the admin to add, edit and delete staff members. Using this feature an admin can add chefs, waiters, managers. priority: high  4.10.2 Stimulus/response sequences 4.8.1 Description and Priority  The system will give customers the ability to give a feedback for the food or overall services. In the feedback screen there are multiple choice questions each having two options “Satisfactory” and “Unsatisfactory”. At the end there is a submit button. priority: high Software Requirements Specification for DineOut Page 16  4.8.2 Stimulus/Response sequences ","System should be compatible and will smoothly run on Android version 6.0 or above.  2.5.2 2.5.2 Device Constraint  DineOut’s core system and its user interfaces should be compatible with tablets. However, running on small android mobile devices is not necessary. Software Requirements Specification for DineOut Page 6 2.6 User Documentation The software is accompanied by the following materials for further help: ● User Manual Version 1.0 ● Online support at www.dinout.com 2.7 Assumptions and Dependencies One assumption about the software is that it will always be used on tablets that have enough resources to run the application. If the tablet does not have enough hardware resources available for the application, there may be scenarios where the application does not work as intended or not even at all. The application uses Firebase database for online storage of information like orders and menu items that needs to be in working state. If the Firebase interface changes the application needs to be adjusted accordingly. Software Requirements Specification for DineOut Page 7 3. External Interface Requirements 3.1 User Interfaces 2.5.2 2.5.2 Device Constraint  DineOut’s core system and its user interfaces should be compatible with tablets. However, running on small android mobile devices is not necessary. Software Requirements Specification for DineOut Page 6 2.6 User Documentation The software is accompanied by the following materials for further help: ● User Manual Version 1.0 ● Online support at www.dinout.com 2.7 Assumptions and Dependencies One assumption about the software is that it will always be used on tablets that have enough resources to run the application. If the tablet does not have enough hardware resources available for the application, there may be scenarios where the application does not work as intended or not even at all. The application uses Firebase database for online storage of information like orders and menu items that needs to be in working state. If the Firebase interface changes the application needs to be adjusted accordingly. Software Requirements Specification for DineOut Page 7 3. External Interface Requirements 3.1 User Interfaces  1. Customer Interface DineOut’s core system and its user interfaces should be compatible with tablets. However, running on small android mobile devices is not necessary. Software Requirements Specification for DineOut Page 6 2.6 User Documentation The software is accompanied by the following materials for further help: ● User Manual Version 1.0 ● Online support at www.dinout.com 2.7 Assumptions and Dependencies One assumption about the software is that it will always be used on tablets that have enough resources to run the application. If the tablet does not have enough hardware resources available for the application, there may be scenarios where the application does not work as intended or not even at all. The application uses Firebase database for online storage of information like orders and menu items that needs to be in working state. If the Firebase interface changes the application needs to be adjusted accordingly. Software Requirements Specification for DineOut Page 7 3. External Interface Requirements 3.1 User Interfaces  1. Customer Interface  The customer interface will contain three screens. All three screen will have a consistent layout. 1.1. Place Order In this screen, system shows a list of cards (UI Elements) of dishes. Each dish will have an image, its price per serving. 3. Hall Manager Interface  Hall manager will have a screen where he will get notification whenever an order is completed. System will notify the hall manager about the order number and table number. Hall Manager also has a screen where all orders are listed, and status button to mark the order as paid. Moreover, he also has an interface screen to see and the status of tables in the restaurant as free/available.  4. Admin Interface Software Requirements Specification for DineOut Page 8 As Admin is authorized to perform CRUD operations on Staff Members, Menu Items and Inventory Items. He’ll be having three different screens for Staff Members, Menu Items, and Inventory. 3.2 Hardware Interfaces Our system can interact with a hardware device directly. We have to connect our system to the bill printer for handing the hard copy of the bill to the customer. For billing module, we may have to use a credit card reader for payment, but the interaction and the results generated by that reader are just entered into our system manually by the user. Moreover, the central screen in kitchen which will be displaying the status of order queues. 3.3 Software Interfaces ● For Database services system shall use to Firebase latest version released on October 16, 2018. ● System will run on android version above or equal to marshmallow 6.0 ● Hall manager will have a screen where he will get notification whenever an order is completed. System will notify the hall manager about the order number and table number. Hall Manager also has a screen where all orders are listed, and status button to mark the order as paid. Moreover, he also has an interface screen to see and the status of tables in the restaurant as free/available.  4. Admin Interface Software Requirements Specification for DineOut Page 8 As Admin is authorized to perform CRUD operations on Staff Members, Menu Items and Inventory Items. He’ll be having three different screens for Staff Members, Menu Items, and Inventory. 3.2 Hardware Interfaces Our system can interact with a hardware device directly. We have to connect our system to the bill printer for handing the hard copy of the bill to the customer. For billing module, we may have to use a credit card reader for payment, but the interaction and the results generated by that reader are just entered into our system manually by the user. Moreover, the central screen in kitchen which will be displaying the status of order queues. 3.3 Software Interfaces ● For Database services system shall use to Firebase latest version released on October 16, 2018. ● System will run on android version above or equal to marshmallow 6.0 ●  System shall use v4 support library Print Helper for connecting to the printer and ","The system gives ability to the admin to add, edit and delete staff members. Using this feature an admin can add chefs, waiters, managers. priority: high  4.9.2 Stimulus/Response sequences  Admin/Manage screen shows a grid of staff members. There is a button at the top of grid which says Add Member. In the grid after every entry there is a “Edit” and “Remove” button. REQ-1: Admin should be able to add all necessary information about the staff member REQ-2: System must give admin the ability to edit information about all staff members REQ-3: System must give admin the ability to remove staff members. 4.10 Add/Edit/Delete Menu Items  4.10.1 Description and Priority  The system gives ability to the admin to add, edit and delete staff members. Using this feature an admin can add chefs, waiters, managers. priority: high 4.9.2 Stimulus/Response sequences  Admin/Manage screen shows a grid of staff members. There is a button at the top of grid which says Add Member. In the grid after every entry there is a “Edit” and “Remove” button.  1. Stimulus: 4.9.1 Description and Priority  The system gives ability to the admin to add, edit and delete staff members. Using this feature an admin can add chefs, waiters, managers. priority: high  4.9.2 Stimulus/Response sequences 4.10.1 Description and Priority  The system gives ability to the admin to add, edit and delete staff members. Using this feature an admin can add chefs, waiters, managers. priority: high  4.10.2 Stimulus/response sequences ","5.4.9 Reusability: Current version can be used in the future versions with more functionality added.  5.4.10 Robustness: Software must have checks to ensure that the items that are not available in the menu Software must have checks to ensure that the items that are not available in the menu cannot be selected and the emails, phone numbers added are all valid.  5.4.11 Testability: All the requirements are fulfilled, response time is low, and all functions are working All the requirements are fulfilled, response time is low, and all functions are working perfectly. 4.6.3 Functional Requirements  REQ-1: System must send a notification to the hall manager once all the dishes of a particular order has been marked “cooked”. REQ-2: System must replace the timer screen with a new screen having feedback and request bill options. Software Requirements Specification for DineOut Page 15 4.7 Request Bill  4.7.1 Description and Priority 4.8.3 Functional Requirements  REQ-1: System must show the feedback screen to the user. REQ-2: System must display multiple choice questions for feedback. 4.9 Add/Edit/Delete Staff Members  4.9.1 Description and Priority 1. Stimulus:  Customer taps the “Confirm Order” button in “Place Order screen”. Response: Displays the dishes on kitchen screen in corresponding chef’s queue. Software Requirements Specification for DineOut Page 12  4.3.3 Functional Requirements Software Requirements Specification for DineOut Page 1 1. Introduction 1.1 Purpose DineOut is an android application that aims to digitalize the process of various restaurant management operations including ordering and inventory management and POS. This document aims to capture the system requirements and features particularly related to ordering and inventory management to be implemented in DineOut version 1.0., with the later releases on POS (Point of Sale). 1.2 Document Conventions  1.2.1 Priority Conventions In this complete document, we will mention priority as “low” or “high” throughout the document. Secondly, priorities are only mentioned in section 4 and section 5 along with detailed description of the requirements. Any high-level requirements mentioned elsewhere are assumed to inherit priorities of their detailed counterparts in section 4,5.  1.2.2 Fonts Conventions Throughout this document, All the user entities are written in capitalizations i.e. first letter as capital. Also, any significant term which has been described in the glossary is made bold and italic in the text. On the other hand, those terms which are significant (but not described in glossary) are bold in text. 1.3 Intended Audience and Reading Suggestions The purpose of this document is to give a detailed description of the requirements for the “DineOut” software. It will illustrate the purpose, scope and complete description for the development of system. It will also explain external interface requirements and system requirements as well as non-functional requirements. This document is primarily intended to be proposed to a customer for its approval and also for further processing such as additions to be developed in later releases. Customers can refer to section 3 and 4 for the list of requirements implemented in Version 1.0. Users are advised to refer to user documentation section for tutorials and online support information. This document will also be used as a reference for developing and testing Version 1.0 by the development team as well as the testers. The development team can refer to section 2.3 and 2.6 for system level information and section 3 for system features that are to be implemented in this version of the software. Software Requirements Specification for DineOut Page 2 1.4 Product Scope DineOut is a restaurant management system developed with the intention of automating the day to day tasks in a restaurant like order and inventory management, bill generation and taking feedback. This release of the software would deal with these tasks only whereas more areas might be automated in the future versions of this software. The main purpose is to improve the performance of the restaurant by eradicating the daily paperwork. With this system the tasks would be performed in less amount of time and more efficiently. An additional benefit of this software is that during the rush hours the load can be balanced effectively, and restaurants would perform better than usual. In addition to this, human error that occurs when performing tasks manually is also minimized and presence of queues in the system to assign tasks to chefs can reduce congestion in the kitchen. The system would also result in reduction of labor which would result in the reduction of expenses of the restaurant. Feedback module would help the restaurant check for how well they are performing, and monthly/yearly figures can be checked by the billing module to see the trends in sales and profits. These benefits can potentially result in generation of more revenues for the restaurant. 1.5 References 1. Android User Interface Guidelines, Available at: https://developer.android.com/guide/practices/ui_guidelines/ 2. IEEE. IEEE Std 830-1998 IEEE Recommended Practice for Software Requirements Specifications. IEEE Computer Society, 1998. Software Requirements Specification for DineOut Page 3 2. Overall Description This section will give an overview of the DineOut application. The basic functionality of the system as well its context will be explored in detail. It also describes different kinds of stakeholders and user classes associated with the system and what functionality is available for each class. At last, the assumptions and dependencies for the system are presented. 2.1 Product Perspective DineOut app will attempt to replace the traditional manual ordering process and is a new self- contained software system that consists of two parts: one mobile application and the other is Firebase database. The mobile application will be used for ordering and interacting with the inventory while the Firebase database will be used for storing the inventory and ordering related information about the food items like pending and complete order queues. The mobile application will have five interfaces. Each for Customer, Manager, Head Chef, Admin and Chef. Manager can see/edit the status of available/reserved tables. Customer’s interface will consist of a scrollable menu listing available items and their price. When the customer selects some dishes and place the order, it will be stored in “pending orders” table in Firebase database. Head Chef’s interface will be such that he is notified of the pending order and he is able to assign it to one the available queues of chefs who are then able to see the new order in their screens or on a central display in kitchen. After each item/dish in an order is prepared, the order is marked completed through the Head Chef’s interface, the hall manager gets notified through his interface. Customer’s interface has an option for requesting the bill. Bill is printed through the Manager’s interface. Admin can change and modify the Firebase database like add new menus or staff, edit current inventory stock etc. Fig1 - System Perspective Diagram Software Requirements Specification for DineOut Page 4 2.2 Product Functions Given below are the major functions that can be performed using DineOut app. Moreover, a Data Flow Diagram (DFD) for better understanding of the system is also given in Appendix B. The system will: • Allow Customers to scroll through the menu and select the dishes he/she wants. • Allow the Customers to cancel/edit the order any time before its prepared. • Allow Customers to provide feedback regarding the food and overall service of the restaurant. • Allow Customers to request for bill. • Allow Customers to ask for help through the system. • Assign Head Chef to assign the dishes in an order to chefs according to their specialties. • Show dish queues and their status, for Chefs. • Allow admin to perform CRUD (create, retrieve, update and delete) operations on Staff Members, Menu Items and Inventory. • Allow Head Chef to mark orders complete. • Allow the Head Chef to approve cancellation of dish or order. • Allow Hall Manager to mark the bill as paid. • Notify the Hall Manager when a particular order is complete. • Allow the Hall Manager to see/edit status of tables reserved and available and their capacities. 2.3 User Classes and Characteristics There are four types of users that interact with our system (See appendix B). Firstly, there is a Hall Manager, then Customer, Head Chef and Admin. We’ll provide an interface for Chefs as well through which they are looking at the status of their order queues, but they will not interact with our system. ","5.4.2 Availability: The system is up and running for most of the time and server is not down for more than a few minutes to avoid inconvenience of the customers.  5.4.3 Correctness: The bill generated by the application must be accurate and the orders placed should exactly be the same which the user has selected. Software Requirements Specification for DineOut Page 20  5.4.4 Flexibility: If need arises in the future, software can be modified to change the requirements. 2.5.2 2.5.2 Device Constraint  DineOut’s core system and its user interfaces should be compatible with tablets. However, running on small android mobile devices is not necessary. Software Requirements Specification for DineOut Page 6 2.6 User Documentation The software is accompanied by the following materials for further help: ● User Manual Version 1.0 ● Online support at www.dinout.com 2.7 Assumptions and Dependencies One assumption about the software is that it will always be used on tablets that have enough resources to run the application. If the tablet does not have enough hardware resources available for the application, there may be scenarios where the application does not work as intended or not even at all. The application uses Firebase database for online storage of information like orders and menu items that needs to be in working state. If the Firebase interface changes the application needs to be adjusted accordingly. Software Requirements Specification for DineOut Page 7 3. External Interface Requirements 3.1 User Interfaces  1. Customer Interface System should be compatible and will smoothly run on Android version 6.0 or above.  2.5.2 2.5.2 Device Constraint  DineOut’s core system and its user interfaces should be compatible with tablets. However, running on small android mobile devices is not necessary. Software Requirements Specification for DineOut Page 6 2.6 User Documentation The software is accompanied by the following materials for further help: ● User Manual Version 1.0 ● Online support at www.dinout.com 2.7 Assumptions and Dependencies One assumption about the software is that it will always be used on tablets that have enough resources to run the application. If the tablet does not have enough hardware resources available for the application, there may be scenarios where the application does not work as intended or not even at all. The application uses Firebase database for online storage of information like orders and menu items that needs to be in working state. If the Firebase interface changes the application needs to be adjusted accordingly. Software Requirements Specification for DineOut Page 7 3. External Interface Requirements 3.1 User Interfaces 5.4.4 Flexibility: If need arises in the future, software can be modified to change the requirements.  5.4.5 Interoperability: The data is transferred from the customer’s end to the kitchen and then head chef assigns orders to each chef. This way data is transferred from one part of the system to another.  5.4.6 Maintainability: Software can be easily repaired if a fault occurs. DineOut’s core system and its user interfaces should be compatible with tablets. However, running on small android mobile devices is not necessary. Software Requirements Specification for DineOut Page 6 2.6 User Documentation The software is accompanied by the following materials for further help: ● User Manual Version 1.0 ● Online support at www.dinout.com 2.7 Assumptions and Dependencies One assumption about the software is that it will always be used on tablets that have enough resources to run the application. If the tablet does not have enough hardware resources available for the application, there may be scenarios where the application does not work as intended or not even at all. The application uses Firebase database for online storage of information like orders and menu items that needs to be in working state. If the Firebase interface changes the application needs to be adjusted accordingly. Software Requirements Specification for DineOut Page 7 3. External Interface Requirements 3.1 User Interfaces  1. Customer Interface  The customer interface will contain three screens. All three screen will have a consistent layout. 1.1. Place Order In this screen, system shows a list of cards (UI Elements) of dishes. Each dish will have an image, its price per serving. ","2.5.2 2.5.2 Device Constraint  DineOut’s core system and its user interfaces should be compatible with tablets. However, running on small android mobile devices is not necessary. Software Requirements Specification for DineOut Page 6 2.6 User Documentation The software is accompanied by the following materials for further help: ● User Manual Version 1.0 ● Online support at www.dinout.com 2.7 Assumptions and Dependencies One assumption about the software is that it will always be used on tablets that have enough resources to run the application. If the tablet does not have enough hardware resources available for the application, there may be scenarios where the application does not work as intended or not even at all. The application uses Firebase database for online storage of information like orders and menu items that needs to be in working state. If the Firebase interface changes the application needs to be adjusted accordingly. Software Requirements Specification for DineOut Page 7 3. External Interface Requirements 3.1 User Interfaces  1. Customer Interface System should be compatible and will smoothly run on Android version 6.0 or above.  2.5.2 2.5.2 Device Constraint  DineOut’s core system and its user interfaces should be compatible with tablets. However, running on small android mobile devices is not necessary. Software Requirements Specification for DineOut Page 6 2.6 User Documentation The software is accompanied by the following materials for further help: ● User Manual Version 1.0 ● Online support at www.dinout.com 2.7 Assumptions and Dependencies One assumption about the software is that it will always be used on tablets that have enough resources to run the application. If the tablet does not have enough hardware resources available for the application, there may be scenarios where the application does not work as intended or not even at all. The application uses Firebase database for online storage of information like orders and menu items that needs to be in working state. If the Firebase interface changes the application needs to be adjusted accordingly. Software Requirements Specification for DineOut Page 7 3. External Interface Requirements 3.1 User Interfaces DineOut’s core system and its user interfaces should be compatible with tablets. However, running on small android mobile devices is not necessary. Software Requirements Specification for DineOut Page 6 2.6 User Documentation The software is accompanied by the following materials for further help: ● User Manual Version 1.0 ● Online support at www.dinout.com 2.7 Assumptions and Dependencies One assumption about the software is that it will always be used on tablets that have enough resources to run the application. If the tablet does not have enough hardware resources available for the application, there may be scenarios where the application does not work as intended or not even at all. The application uses Firebase database for online storage of information like orders and menu items that needs to be in working state. If the Firebase interface changes the application needs to be adjusted accordingly. Software Requirements Specification for DineOut Page 7 3. External Interface Requirements 3.1 User Interfaces  1. Customer Interface  The customer interface will contain three screens. All three screen will have a consistent layout. 1.1. Place Order In this screen, system shows a list of cards (UI Elements) of dishes. Each dish will have an image, its price per serving. Software Requirements Specification for DineOut Page 1 1. Introduction 1.1 Purpose DineOut is an android application that aims to digitalize the process of various restaurant management operations including ordering and inventory management and POS. This document aims to capture the system requirements and features particularly related to ordering and inventory management to be implemented in DineOut version 1.0., with the later releases on POS (Point of Sale). 1.2 Document Conventions  1.2.1 Priority Conventions In this complete document, we will mention priority as “low” or “high” throughout the document. Secondly, priorities are only mentioned in section 4 and section 5 along with detailed description of the requirements. Any high-level requirements mentioned elsewhere are assumed to inherit priorities of their detailed counterparts in section 4,5.  1.2.2 Fonts Conventions Throughout this document, All the user entities are written in capitalizations i.e. first letter as capital. Also, any significant term which has been described in the glossary is made bold and italic in the text. On the other hand, those terms which are significant (but not described in glossary) are bold in text. 1.3 Intended Audience and Reading Suggestions The purpose of this document is to give a detailed description of the requirements for the “DineOut” software. It will illustrate the purpose, scope and complete description for the development of system. It will also explain external interface requirements and system requirements as well as non-functional requirements. This document is primarily intended to be proposed to a customer for its approval and also for further processing such as additions to be developed in later releases. Customers can refer to section 3 and 4 for the list of requirements implemented in Version 1.0. Users are advised to refer to user documentation section for tutorials and online support information. This document will also be used as a reference for developing and testing Version 1.0 by the development team as well as the testers. The development team can refer to section 2.3 and 2.6 for system level information and section 3 for system features that are to be implemented in this version of the software. Software Requirements Specification for DineOut Page 2 1.4 Product Scope DineOut is a restaurant management system developed with the intention of automating the day to day tasks in a restaurant like order and inventory management, bill generation and taking feedback. This release of the software would deal with these tasks only whereas more areas might be automated in the future versions of this software. The main purpose is to improve the performance of the restaurant by eradicating the daily paperwork. With this system the tasks would be performed in less amount of time and more efficiently. An additional benefit of this software is that during the rush hours the load can be balanced effectively, and restaurants would perform better than usual. In addition to this, human error that occurs when performing tasks manually is also minimized and presence of queues in the system to assign tasks to chefs can reduce congestion in the kitchen. The system would also result in reduction of labor which would result in the reduction of expenses of the restaurant. Feedback module would help the restaurant check for how well they are performing, and monthly/yearly figures can be checked by the billing module to see the trends in sales and profits. These benefits can potentially result in generation of more revenues for the restaurant. 1.5 References 1. Android User Interface Guidelines, Available at: https://developer.android.com/guide/practices/ui_guidelines/ 2. IEEE. IEEE Std 830-1998 IEEE Recommended Practice for Software Requirements Specifications. IEEE Computer Society, 1998. Software Requirements Specification for DineOut Page 3 2. Overall Description This section will give an overview of the DineOut application. The basic functionality of the system as well its context will be explored in detail. It also describes different kinds of stakeholders and user classes associated with the system and what functionality is available for each class. At last, the assumptions and dependencies for the system are presented. 2.1 Product Perspective DineOut app will attempt to replace the traditional manual ordering process and is a new self- contained software system that consists of two parts: one mobile application and the other is Firebase database. The mobile application will be used for ordering and interacting with the inventory while the Firebase database will be used for storing the inventory and ordering related information about the food items like pending and complete order queues. The mobile application will have five interfaces. Each for Customer, Manager, Head Chef, Admin and Chef. Manager can see/edit the status of available/reserved tables. Customer’s interface will consist of a scrollable menu listing available items and their price. When the customer selects some dishes and place the order, it will be stored in “pending orders” table in Firebase database. Head Chef’s interface will be such that he is notified of the pending order and he is able to assign it to one the available queues of chefs who are then able to see the new order in their screens or on a central display in kitchen. After each item/dish in an order is prepared, the order is marked completed through the Head Chef’s interface, the hall manager gets notified through his interface. Customer’s interface has an option for requesting the bill. Bill is printed through the Manager’s interface. Admin can change and modify the Firebase database like add new menus or staff, edit current inventory stock etc. Fig1 - System Perspective Diagram Software Requirements Specification for DineOut Page 4 2.2 Product Functions Given below are the major functions that can be performed using DineOut app. Moreover, a Data Flow Diagram (DFD) for better understanding of the system is also given in Appendix B. The system will: • Allow Customers to scroll through the menu and select the dishes he/she wants. • Allow the Customers to cancel/edit the order any time before its prepared. • Allow Customers to provide feedback regarding the food and overall service of the restaurant. • Allow Customers to request for bill. • Allow Customers to ask for help through the system. • Assign Head Chef to assign the dishes in an order to chefs according to their specialties. • Show dish queues and their status, for Chefs. • Allow admin to perform CRUD (create, retrieve, update and delete) operations on Staff Members, Menu Items and Inventory. • Allow Head Chef to mark orders complete. • Allow the Head Chef to approve cancellation of dish or order. • Allow Hall Manager to mark the bill as paid. • Notify the Hall Manager when a particular order is complete. • Allow the Hall Manager to see/edit status of tables reserved and available and their capacities. 2.3 User Classes and Characteristics There are four types of users that interact with our system (See appendix B). Firstly, there is a Hall Manager, then Customer, Head Chef and Admin. We’ll provide an interface for Chefs as well through which they are looking at the status of their order queues, but they will not interact with our system. 1.2.1 Priority Conventions In this complete document, we will mention priority as “low” or “high” throughout the document. Secondly, priorities are only mentioned in section 4 and section 5 along with detailed description of the requirements. Any high-level requirements mentioned elsewhere are assumed to inherit priorities of their detailed counterparts in section 4,5.  1.2.2 Fonts Conventions Throughout this document, All the user entities are written in capitalizations i.e. first letter as capital. Also, any significant term which has been described in the glossary is made bold and italic in the text. On the other hand, those terms which are significant (but not described in glossary) are bold in text. 1.3 Intended Audience and Reading Suggestions The purpose of this document is to give a detailed description of the requirements for the “DineOut” software. It will illustrate the purpose, scope and complete description for the development of system. It will also explain external interface requirements and system requirements as well as non-functional requirements. This document is primarily intended to be proposed to a customer for its approval and also for further processing such as additions to be developed in later releases. Customers can refer to section 3 and 4 for the list of requirements implemented in Version 1.0. Users are advised to refer to user documentation section for tutorials and online support information. This document will also be used as a reference for developing and testing Version 1.0 by the development team as well as the testers. The development team can refer to section 2.3 and 2.6 for system level information and section 3 for system features that are to be implemented in this version of the software. Software Requirements Specification for DineOut Page 2 1.4 Product Scope DineOut is a restaurant management system developed with the intention of automating the day to day tasks in a restaurant like order and inventory management, bill generation and taking feedback. This release of the software would deal with these tasks only whereas more areas might be automated in the future versions of this software. The main purpose is to improve the performance of the restaurant by eradicating the daily paperwork. With this system the tasks would be performed in less amount of time and more efficiently. An additional benefit of this software is that during the rush hours the load can be balanced effectively, and restaurants would perform better than usual. In addition to this, human error that occurs when performing tasks manually is also minimized and presence of queues in the system to assign tasks to chefs can reduce congestion in the kitchen. The system would also result in reduction of labor which would result in the reduction of expenses of the restaurant. Feedback module would help the restaurant check for how well they are performing, and monthly/yearly figures can be checked by the billing module to see the trends in sales and profits. These benefits can potentially result in generation of more revenues for the restaurant. 1.5 References 1. Android User Interface Guidelines, Available at: https://developer.android.com/guide/practices/ui_guidelines/ 2. IEEE. IEEE Std 830-1998 IEEE Recommended Practice for Software Requirements Specifications. IEEE Computer Society, 1998. Software Requirements Specification for DineOut Page 3 2. Overall Description This section will give an overview of the DineOut application. The basic functionality of the system as well its context will be explored in detail. It also describes different kinds of stakeholders and user classes associated with the system and what functionality is available for each class. At last, the assumptions and dependencies for the system are presented. 2.1 Product Perspective DineOut app will attempt to replace the traditional manual ordering process and is a new self- contained software system that consists of two parts: one mobile application and the other is Firebase database. The mobile application will be used for ordering and interacting with the inventory while the Firebase database will be used for storing the inventory and ordering related information about the food items like pending and complete order queues. The mobile application will have five interfaces. Each for Customer, Manager, Head Chef, Admin and Chef. Manager can see/edit the status of available/reserved tables. Customer’s interface will consist of a scrollable menu listing available items and their price. When the customer selects some dishes and place the order, it will be stored in “pending orders” table in Firebase database. Head Chef’s interface will be such that he is notified of the pending order and he is able to assign it to one the available queues of chefs who are then able to see the new order in their screens or on a central display in kitchen. After each item/dish in an order is prepared, the order is marked completed through the Head Chef’s interface, the hall manager gets notified through his interface. Customer’s interface has an option for requesting the bill. Bill is printed through the Manager’s interface. Admin can change and modify the Firebase database like add new menus or staff, edit current inventory stock etc. Fig1 - System Perspective Diagram Software Requirements Specification for DineOut Page 4 2.2 Product Functions Given below are the major functions that can be performed using DineOut app. Moreover, a Data Flow Diagram (DFD) for better understanding of the system is also given in Appendix B. The system will: • Allow Customers to scroll through the menu and select the dishes he/she wants. • Allow the Customers to cancel/edit the order any time before its prepared. • Allow Customers to provide feedback regarding the food and overall service of the restaurant. • Allow Customers to request for bill. • Allow Customers to ask for help through the system. • Assign Head Chef to assign the dishes in an order to chefs according to their specialties. • Show dish queues and their status, for Chefs. • Allow admin to perform CRUD (create, retrieve, update and delete) operations on Staff Members, Menu Items and Inventory. • Allow Head Chef to mark orders complete. • Allow the Head Chef to approve cancellation of dish or order. • Allow Hall Manager to mark the bill as paid. • Notify the Hall Manager when a particular order is complete. • Allow the Hall Manager to see/edit status of tables reserved and available and their capacities. 2.3 User Classes and Characteristics There are four types of users that interact with our system (See appendix B). Firstly, there is a Hall Manager, then Customer, Head Chef and Admin. We’ll provide an interface for Chefs as well through which they are looking at the status of their order queues, but they will not interact with our system.  2.3.1 Customer Class Customers interact with our system directly in order to place order, modify order, get bill and give feedback. We do not store any information related to customers in our system. The process of order taking starts from customers placing order and then the other series of events begin. "